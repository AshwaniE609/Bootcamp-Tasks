#include <ESP8266WiFi.h>
#include <espnow.h>

uint8_t broadcastAddress1[] = {0xDC, 0x4F, 0x22, 0x5F, 0x41, 0x19};  // MAC address of the first NodeMCU
uint8_t broadcastAddress2[] = {0x68, 0xC6, 0x3A, 0x87, 0xFC, 0x4};  // MAC address of the second NodeMCU

#define BOARD_ID 2

// Structure example to send data
// Must match the receiver structure
typedef struct struct_message {
    int id;
    int x;
    int y;
} struct_message;

// Create a struct_message called test to store variables to be sent
struct_message myData;

unsigned long lastTime = 0;
unsigned long timerDelay = 10000;

void OnDataSent(uint8_t *mac_addr, uint8_t sendStatus) {
  Serial.print("\r\nLast Packet Send Status: ");
  if (sendStatus == 0){
    Serial.println("Delivery success");
  }
  else{
    Serial.println("Delivery fail");
  }
}

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);

  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  if (esp_now_init() != 0) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  esp_now_set_self_role(ESP_NOW_ROLE_CONTROLLER);

  // Once ESPNow is successfully init, we will register for Send CB to
  // get the status of Transmitted packet
  esp_now_register_send_cb(OnDataSent);
  
  // Register the first peer
  esp_now_add_peer(broadcastAddress1, ESP_NOW_ROLE_SLAVE, 1, NULL, 0);
  
  // Register the second peer
  esp_now_add_peer(broadcastAddress2, ESP_NOW_ROLE_SLAVE, 1, NULL, 0);
}

void loop() {
  // put your main code here, to run repeatedly:
  if ((millis() - lastTime) > timerDelay) {
    // Set values to send
    myData.id = BOARD_ID;
    myData.x = random(1, 50);
    myData.y = random(1, 50);

    // Send message via ESP-NOW to the first peer (NodeMCU 1)
    esp_now_send(0, (uint8_t *) &myData, sizeof(myData));
    
    // Send message via ESP-NOW to the second peer (NodeMCU 2)
    uint8_t macAddress2[] = {0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56};
    esp_now_send(macAddress2, (uint8_t *) &myData, sizeof(myData));
    
    lastTime = millis();
  }
}

